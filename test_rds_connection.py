#!/usr/bin/env python3
"""
Script para probar la conexi√≥n a RDS PostgreSQL
"""
import psycopg2
import os
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Obtener credenciales
DATABASE_USER = os.getenv("DATABASE_USER", "postgres")
DATABASE_PASSWORD = os.getenv("DATABASE_PASSWORD", "tu_password_aqui")
DATABASE_HOST = os.getenv("DATABASE_HOST", "localhost")
DATABASE_PORT = os.getenv("DATABASE_PORT", "5432")
DATABASE_NAME = os.getenv("DATABASE_NAME", "blacklist_db")

print("=" * 60)
print("PRUEBA DE CONEXI√ìN A RDS PostgreSQL")
print("=" * 60)
print(f"\nHost: {DATABASE_HOST}")
print(f"Puerto: {DATABASE_PORT}")
print(f"Base de datos: {DATABASE_NAME}")
print(f"Usuario: {DATABASE_USER}")
print(f"Password: {'*' * len(DATABASE_PASSWORD)}")
print("\n" + "-" * 60)

try:
    print("\nüîÑ Intentando conectar a RDS...")
    
    # Intentar conexi√≥n
    connection = psycopg2.connect(
        host=DATABASE_HOST,
        port=DATABASE_PORT,
        database=DATABASE_NAME,
        user=DATABASE_USER,
        password=DATABASE_PASSWORD,
        connect_timeout=10  # Timeout de 10 segundos
    )
    
    # Crear cursor y ejecutar consulta de prueba
    cursor = connection.cursor()
    cursor.execute("SELECT version();")
    db_version = cursor.fetchone()
    
    print("‚úÖ CONEXI√ìN EXITOSA!")
    print(f"\nüìä Versi√≥n de PostgreSQL:")
    print(f"   {db_version[0]}")
    
    # Verificar si existe la tabla blacklist
    cursor.execute("""
        SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_name = 'blacklist'
        );
    """)
    table_exists = cursor.fetchone()[0]
    
    if table_exists:
        print("\n‚úÖ Tabla 'blacklist' existe")
        
        # Contar registros
        cursor.execute("SELECT COUNT(*) FROM blacklist;")
        count = cursor.fetchone()[0]
        print(f"   Registros en blacklist: {count}")
    else:
        print("\n‚ö†Ô∏è  Tabla 'blacklist' NO existe (se crear√° al iniciar la app)")
    
    # Cerrar conexi√≥n
    cursor.close()
    connection.close()
    
    print("\n" + "=" * 60)
    print("‚úÖ PRUEBA COMPLETADA - RDS est√° accesible")
    print("=" * 60)

except psycopg2.OperationalError as e:
    print("\n‚ùå ERROR DE CONEXI√ìN")
    print("\nDetalles del error:")
    print(f"   {str(e)}")
    print("\nüîç Posibles causas:")
    print("   1. Las credenciales son incorrectas")
    print("   2. El host/puerto es incorrecto")
    print("   3. El Security Group no permite la conexi√≥n desde tu IP")
    print("   4. La base de datos no existe")
    print("   5. No hay conectividad de red")
    print("\nüí° Soluci√≥n:")
    print("   - Verifica las credenciales en el archivo .env")
    print("   - Verifica los Security Groups de RDS en AWS")
    print("   - Aseg√∫rate de estar conectado a la red correcta")
    
except psycopg2.Error as e:
    print("\n‚ùå ERROR DE BASE DE DATOS")
    print(f"\nDetalles: {str(e)}")
    
except Exception as e:
    print("\n‚ùå ERROR INESPERADO")
    print(f"\nDetalles: {str(e)}")

print("\n")

